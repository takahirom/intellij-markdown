buildscript {
    ext {
        kotlin_version = '1.3.41'
        markdown_version = (project(':').hasProperty('buildNumber') ? "0.2.0.pre-$buildNumber" : "0.2.0.pre-SNAPSHOT")
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4"
    }
}


repositories {
    mavenCentral()
}

apply plugin: 'kotlin-platform-common'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
    testCompile "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
}

allprojects {
    
    ext.projectName = name

    ext.configurePublishing = { baseName ->
        apply plugin: 'maven-publish'
        apply plugin: 'com.jfrog.bintray'
        apply plugin: 'java'

        task sourcesJar(type: Jar) {
            classifier = 'sources'
            archiveClassifier.set("sources")
            from sourceSets.main.allSource
        }

        artifacts {
            archives sourcesJar
        }
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    from components.java
                }
            }
            repositories {
                mavenLocal()
            }
        }

        if (project(':').hasProperty('bintrayUser')) {
            def fullName = "$baseName-kotlin-$kotlin_version"

            publishing {
                publications {
                    MyPublication(MavenPublication) {
                        from components.java
                        groupId 'org.jetbrains'
                        artifactId projectName
                        version fullName

                        artifact sourcesJar
                    }
                }
            }

            bintray {
                publish = false

                user = bintrayUser
                key = bintrayKey
                publications = ['MyPublication']
                pkg {
                    userOrg = 'jetbrains'
                    repo = "markdown"
                    name = projectName
                    licenses = ['Apache-2.0']
                    vcsUrl = 'https://github.com/valich/intellij-markdown'
                    
                    version {
                        name = fullName
                        released = new Date()
                    }
                }
            }
        }
    }
}

sourceSets {
    main.kotlin.srcDirs = ['src']
    test.kotlin.srcDirs = ['test']

    main.resources.srcDirs = []
}

test {
    sourceCompatibility = JavaVersion.VERSION_1_6
    targetCompatibility = JavaVersion.VERSION_1_6
    useJUnit {
        excludeCategories 'org.intellij.markdown.ParserPerformanceTest'
    }
    testLogging {
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false }
}

task downloadCommonmark(type: Exec) {
    onlyIf { !new File("CommonMark").exists() }
    executable 'git'
    args 'clone', 'https://github.com/jgm/CommonMark'
}

task testJar(type: Jar) {
    from sourceSets.test.output
    from sourceSets.main.output
    archiveName 'markdown-test.jar'
    manifest {
        attributes 'Main-Class': 'org.intellij.markdown.SpecRunner'
        attributes 'Class-Path': configurations.testRuntime.join(' ')
    }
}

task runSpec(type: Exec, group: 'verification', dependsOn: [downloadCommonmark, testJar]) {
    executable 'python3'
    workingDir 'CommonMark'
    args 'test/spec_tests.py', '-p', '../run_html_gen.sh'
}

configurePublishing markdown_version